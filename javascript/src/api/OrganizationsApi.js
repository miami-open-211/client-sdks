/**
 * Miami Open 211 API
 * This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Organization', 'model/Location'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Organization'), require('../model/Location'));
  } else {
    // Browser globals (root is window)
    if (!root.MiamiOpen211Api) {
      root.MiamiOpen211Api = {};
    }
    root.MiamiOpen211Api.OrganizationsApi = factory(root.MiamiOpen211Api.ApiClient, root.MiamiOpen211Api.Organization, root.MiamiOpen211Api.Location);
  }
}(this, function(ApiClient, Organization, Location) {
  'use strict';

  /**
   * Organizations service.
   * @module api/OrganizationsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new OrganizationsApi. 
   * @alias module:api/OrganizationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the retrieveLOrganization operation.
     * @callback module:api/OrganizationsApi~retrieveLOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organization>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Organizations
     * Retrieve all of the organizations available in this database.
     * @param {String} accept 
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~retrieveLOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organization>}
     */
    this.retrieveLOrganization = function(accept, organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'accept' is set
      if (accept == undefined || accept == null) {
        throw "Missing the required parameter 'accept' when calling retrieveLOrganization";
      }

      // verify the required parameter 'organizationId' is set
      if (organizationId == undefined || organizationId == null) {
        throw "Missing the required parameter 'organizationId' when calling retrieveLOrganization";
      }


      var pathParams = {
        'organization_id': organizationId
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept': accept
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Organization];

      return this.apiClient.callApi(
        '/organizations/{organization_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveLOrganizationLocations operation.
     * @callback module:api/OrganizationsApi~retrieveLOrganizationLocationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Location>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Organization Locations
     * This endpoint retrieves all locations that belong to a particular organization.
     * @param {String} accept 
     * @param {String} organizationId 
     * @param {module:api/OrganizationsApi~retrieveLOrganizationLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Location>}
     */
    this.retrieveLOrganizationLocations = function(accept, organizationId, callback) {
      var postBody = null;

      // verify the required parameter 'accept' is set
      if (accept == undefined || accept == null) {
        throw "Missing the required parameter 'accept' when calling retrieveLOrganizationLocations";
      }

      // verify the required parameter 'organizationId' is set
      if (organizationId == undefined || organizationId == null) {
        throw "Missing the required parameter 'organizationId' when calling retrieveLOrganizationLocations";
      }


      var pathParams = {
        'organization_id': organizationId
      };
      var queryParams = {
      };
      var headerParams = {
        'Accept': accept
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Location];

      return this.apiClient.callApi(
        '/organizations/{organization_id}/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveLOrganizations operation.
     * @callback module:api/OrganizationsApi~retrieveLOrganizationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Organization>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Organizations
     * Retrieve all of the organizations available in this database.
     * @param {String} accept 
     * @param {Object} opts Optional parameters
     * @param {String} opts.page 
     * @param {String} opts.perPage 
     * @param {module:api/OrganizationsApi~retrieveLOrganizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Organization>}
     */
    this.retrieveLOrganizations = function(accept, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accept' is set
      if (accept == undefined || accept == null) {
        throw "Missing the required parameter 'accept' when calling retrieveLOrganizations";
      }


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      var headerParams = {
        'Accept': accept
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Organization];

      return this.apiClient.callApi(
        '/organizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
