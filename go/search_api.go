/* 
 * Miami Open 211 API
 *
 * This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

import (
	"net/url"
	"encoding/json"
)

type SearchApi struct {
	Configuration Configuration
}

func NewSearchApi() *SearchApi {
	configuration := NewConfiguration()
	return &SearchApi{
		Configuration: *configuration,
	}
}

func NewSearchApiWithBasePath(basePath string) *SearchApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &SearchApi{
		Configuration: *configuration,
	}
}

/**
 * Search
 * This endpoint retrieves all locations that match the criteria based on the parameters below. Multiple parameters can be used at the same time, separated by an ampersand (&amp;).
 *
 * @param accept 
 * @param category 
 * @param email 
 * @param keyword 
 * @param language 
 * @param latLng 
 * @param location 
 * @param orgName 
 * @param radius 
 * @param serviceArea 
 * @param status 
 * @param page 
 * @param perPage 
 * @return []Location
 */
func (a SearchApi) SearchLocations(accept string, category string, email string, keyword string, language string, latLng string, location string, orgName string, radius string, serviceArea string, status string, page string, perPage string) ([]Location, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/search"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}
		queryParams.Add("category", a.Configuration.APIClient.ParameterToString(category, ""))
			queryParams.Add("email", a.Configuration.APIClient.ParameterToString(email, ""))
			queryParams.Add("keyword", a.Configuration.APIClient.ParameterToString(keyword, ""))
			queryParams.Add("language", a.Configuration.APIClient.ParameterToString(language, ""))
			queryParams.Add("lat_lng", a.Configuration.APIClient.ParameterToString(latLng, ""))
			queryParams.Add("location", a.Configuration.APIClient.ParameterToString(location, ""))
			queryParams.Add("org_name", a.Configuration.APIClient.ParameterToString(orgName, ""))
			queryParams.Add("radius", a.Configuration.APIClient.ParameterToString(radius, ""))
			queryParams.Add("service_area", a.Configuration.APIClient.ParameterToString(serviceArea, ""))
			queryParams.Add("status", a.Configuration.APIClient.ParameterToString(status, ""))
			queryParams.Add("page", a.Configuration.APIClient.ParameterToString(page, ""))
			queryParams.Add("per_page", a.Configuration.APIClient.ParameterToString(perPage, ""))
	

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Accept"
	headerParams["Accept"] = accept

	var successPayload = new([]Location)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return *successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

