=begin
#Miami Open 211 API

#This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Organizations
    # Retrieve all of the organizations available in this database.
    # @param accept 
    # @param organization_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Organization>]
    def retrieve_l_organization(accept, organization_id, opts = {})
      data, _status_code, _headers = retrieve_l_organization_with_http_info(accept, organization_id, opts)
      return data
    end

    # Organizations
    # Retrieve all of the organizations available in this database.
    # @param accept 
    # @param organization_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Organization>, Fixnum, Hash)>] Array<Organization> data, response status code and response headers
    def retrieve_l_organization_with_http_info(accept, organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.retrieve_l_organization ..."
      end
      # verify the required parameter 'accept' is set
      fail ArgumentError, "Missing the required parameter 'accept' when calling OrganizationsApi.retrieve_l_organization" if accept.nil?
      # verify the required parameter 'organization_id' is set
      fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.retrieve_l_organization" if organization_id.nil?
      # resource path
      local_var_path = "/organizations/{organization_id}".sub('{format}','json').sub('{' + 'organization_id' + '}', organization_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Accept'] = accept

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Organization>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#retrieve_l_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Organization Locations
    # This endpoint retrieves all locations that belong to a particular organization.
    # @param accept 
    # @param organization_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<Location>]
    def retrieve_l_organization_locations(accept, organization_id, opts = {})
      data, _status_code, _headers = retrieve_l_organization_locations_with_http_info(accept, organization_id, opts)
      return data
    end

    # Organization Locations
    # This endpoint retrieves all locations that belong to a particular organization.
    # @param accept 
    # @param organization_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Location>, Fixnum, Hash)>] Array<Location> data, response status code and response headers
    def retrieve_l_organization_locations_with_http_info(accept, organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.retrieve_l_organization_locations ..."
      end
      # verify the required parameter 'accept' is set
      fail ArgumentError, "Missing the required parameter 'accept' when calling OrganizationsApi.retrieve_l_organization_locations" if accept.nil?
      # verify the required parameter 'organization_id' is set
      fail ArgumentError, "Missing the required parameter 'organization_id' when calling OrganizationsApi.retrieve_l_organization_locations" if organization_id.nil?
      # resource path
      local_var_path = "/organizations/{organization_id}/locations".sub('{format}','json').sub('{' + 'organization_id' + '}', organization_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Accept'] = accept

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Location>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#retrieve_l_organization_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Organizations
    # Retrieve all of the organizations available in this database.
    # @param accept 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page 
    # @option opts [String] :per_page 
    # @return [Array<Organization>]
    def retrieve_l_organizations(accept, opts = {})
      data, _status_code, _headers = retrieve_l_organizations_with_http_info(accept, opts)
      return data
    end

    # Organizations
    # Retrieve all of the organizations available in this database.
    # @param accept 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page 
    # @option opts [String] :per_page 
    # @return [Array<(Array<Organization>, Fixnum, Hash)>] Array<Organization> data, response status code and response headers
    def retrieve_l_organizations_with_http_info(accept, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: OrganizationsApi.retrieve_l_organizations ..."
      end
      # verify the required parameter 'accept' is set
      fail ArgumentError, "Missing the required parameter 'accept' when calling OrganizationsApi.retrieve_l_organizations" if accept.nil?
      # resource path
      local_var_path = "/organizations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)
      header_params[:'Accept'] = accept

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Organization>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#retrieve_l_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
