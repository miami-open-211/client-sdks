/**
 * Miami Open 211 API
 * This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Location;
import io.swagger.client.model.Service;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
public class LocationsApiTest {

    private final LocationsApi api = new LocationsApi();

    
    /**
     * Find Nearby Locations
     *
     * This endpoint retrieves all locations that are near the specified location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findNearbyLocationsTest() throws ApiException {
        String accept = null;
        String locationId = null;
        String radius = null;
        String page = null;
        String perPage = null;
        // List<Location> response = api.findNearbyLocations(accept, locationId, radius, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Location
     *
     * Retrieve all of the locations available in this database.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveLocationTest() throws ApiException {
        String accept = null;
        String locationId = null;
        // List<Location> response = api.retrieveLocation(accept, locationId);

        // TODO: test validations
    }
    
    /**
     * Services
     *
     * Retrieve all services for this location
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveLocationServicesTest() throws ApiException {
        String accept = null;
        String locationId = null;
        // List<Service> response = api.retrieveLocationServices(accept, locationId);

        // TODO: test validations
    }
    
    /**
     * Locations
     *
     * Retrieve all of the locations available.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveLocationsTest() throws ApiException {
        String accept = null;
        String page = null;
        String perPage = null;
        // List<Location> response = api.retrieveLocations(accept, page, perPage);

        // TODO: test validations
    }
    
}
