# coding: utf-8

"""
    Miami Open 211 API

    This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Location(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, organization_id=None, name=None, alternate_name=None, description=None, transportation=None, latitude=None, longitude=None):
        """
        Location - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'organization_id': 'str',
            'name': 'str',
            'alternate_name': 'str',
            'description': 'str',
            'transportation': 'str',
            'latitude': 'str',
            'longitude': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'organization_id': 'organization_id',
            'name': 'name',
            'alternate_name': 'alternate_name',
            'description': 'description',
            'transportation': 'transportation',
            'latitude': 'latitude',
            'longitude': 'longitude'
        }

        self._id = id
        self._organization_id = organization_id
        self._name = name
        self._alternate_name = alternate_name
        self._description = description
        self._transportation = transportation
        self._latitude = latitude
        self._longitude = longitude

    @property
    def id(self):
        """
        Gets the id of this Location.
        Each location must have a unique identifier

        :return: The id of this Location.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Location.
        Each location must have a unique identifier

        :param id: The id of this Location.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Location.
        Each location must belong to a single organization. The identifier of the organization should be given here.

        :return: The organization_id of this Location.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Location.
        Each location must belong to a single organization. The identifier of the organization should be given here.

        :param organization_id: The organization_id of this Location.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def name(self):
        """
        Gets the name of this Location.
        The name of the location

        :return: The name of this Location.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Location.
        The name of the location

        :param name: The name of this Location.
        :type: str
        """

        self._name = name

    @property
    def alternate_name(self):
        """
        Gets the alternate_name of this Location.
        An alternative name for the location

        :return: The alternate_name of this Location.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """
        Sets the alternate_name of this Location.
        An alternative name for the location

        :param alternate_name: The alternate_name of this Location.
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def description(self):
        """
        Gets the description of this Location.
        A description of this location.

        :return: The description of this Location.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Location.
        A description of this location.

        :param description: The description of this Location.
        :type: str
        """

        self._description = description

    @property
    def transportation(self):
        """
        Gets the transportation of this Location.
        A description of the access to public or private transportation to and from the location.

        :return: The transportation of this Location.
        :rtype: str
        """
        return self._transportation

    @transportation.setter
    def transportation(self, transportation):
        """
        Sets the transportation of this Location.
        A description of the access to public or private transportation to and from the location.

        :param transportation: The transportation of this Location.
        :type: str
        """

        self._transportation = transportation

    @property
    def latitude(self):
        """
        Gets the latitude of this Location.
        Y coordinate of location expressed in decimal degrees in WGS84 datum.

        :return: The latitude of this Location.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this Location.
        Y coordinate of location expressed in decimal degrees in WGS84 datum.

        :param latitude: The latitude of this Location.
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """
        Gets the longitude of this Location.
        X coordinate of location expressed in decimal degrees in WGS84 datum.

        :return: The longitude of this Location.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this Location.
        X coordinate of location expressed in decimal degrees in WGS84 datum.

        :param longitude: The longitude of this Location.
        :type: str
        """

        self._longitude = longitude

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
