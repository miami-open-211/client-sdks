# coding: utf-8

"""
    Miami Open 211 API

    This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Service(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, organization_id=None, location_id=None, program_id=None, name=None, alternate_name=None, description=None, url=None, email=None, status=None, application_process=None, wait_time=None, taxonomy_ids=None):
        """
        Service - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'organization_id': 'str',
            'location_id': 'str',
            'program_id': 'str',
            'name': 'str',
            'alternate_name': 'str',
            'description': 'str',
            'url': 'str',
            'email': 'str',
            'status': 'str',
            'application_process': 'str',
            'wait_time': 'str',
            'taxonomy_ids': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'organization_id': 'organization_id',
            'location_id': 'location_id',
            'program_id': 'program_id',
            'name': 'name',
            'alternate_name': 'alternate_name',
            'description': 'description',
            'url': 'url',
            'email': 'email',
            'status': 'status',
            'application_process': 'application_process',
            'wait_time': 'wait_time',
            'taxonomy_ids': 'taxonomy_ids'
        }

        self._id = id
        self._organization_id = organization_id
        self._location_id = location_id
        self._program_id = program_id
        self._name = name
        self._alternate_name = alternate_name
        self._description = description
        self._url = url
        self._email = email
        self._status = status
        self._application_process = application_process
        self._wait_time = wait_time
        self._taxonomy_ids = taxonomy_ids

    @property
    def id(self):
        """
        Gets the id of this Service.
        Each service must have a unique identifier.

        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Service.
        Each service must have a unique identifier.

        :param id: The id of this Service.
        :type: str
        """

        self._id = id

    @property
    def organization_id(self):
        """
        Gets the organization_id of this Service.
        The identifier of the organization that provides this service.

        :return: The organization_id of this Service.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """
        Sets the organization_id of this Service.
        The identifier of the organization that provides this service.

        :param organization_id: The organization_id of this Service.
        :type: str
        """

        self._organization_id = organization_id

    @property
    def location_id(self):
        """
        Gets the location_id of this Service.
        The identifier of the location where this service is delivered.

        :return: The location_id of this Service.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """
        Sets the location_id of this Service.
        The identifier of the location where this service is delivered.

        :param location_id: The location_id of this Service.
        :type: str
        """

        self._location_id = location_id

    @property
    def program_id(self):
        """
        Gets the program_id of this Service.
        The identifier of the program this service is delivered under.

        :return: The program_id of this Service.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """
        Sets the program_id of this Service.
        The identifier of the program this service is delivered under.

        :param program_id: The program_id of this Service.
        :type: str
        """

        self._program_id = program_id

    @property
    def name(self):
        """
        Gets the name of this Service.
        The official or public name of the service.

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Service.
        The official or public name of the service.

        :param name: The name of this Service.
        :type: str
        """

        self._name = name

    @property
    def alternate_name(self):
        """
        Gets the alternate_name of this Service.
        Alternative or commonly used name for a service.

        :return: The alternate_name of this Service.
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """
        Sets the alternate_name of this Service.
        Alternative or commonly used name for a service.

        :param alternate_name: The alternate_name of this Service.
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def description(self):
        """
        Gets the description of this Service.
        A description of the service.

        :return: The description of this Service.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Service.
        A description of the service.

        :param description: The description of this Service.
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """
        Gets the url of this Service.
        URL of the service

        :return: The url of this Service.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Service.
        URL of the service

        :param url: The url of this Service.
        :type: str
        """

        self._url = url

    @property
    def email(self):
        """
        Gets the email of this Service.
        Email address for the service

        :return: The email of this Service.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Service.
        Email address for the service

        :param email: The email of this Service.
        :type: str
        """

        self._email = email

    @property
    def status(self):
        """
        Gets the status of this Service.
        The current status of the service.

        :return: The status of this Service.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Service.
        The current status of the service.

        :param status: The status of this Service.
        :type: str
        """

        self._status = status

    @property
    def application_process(self):
        """
        Gets the application_process of this Service.
        The steps needed to access the service.

        :return: The application_process of this Service.
        :rtype: str
        """
        return self._application_process

    @application_process.setter
    def application_process(self, application_process):
        """
        Sets the application_process of this Service.
        The steps needed to access the service.

        :param application_process: The application_process of this Service.
        :type: str
        """

        self._application_process = application_process

    @property
    def wait_time(self):
        """
        Gets the wait_time of this Service.
        Time a client may expect to wait before receiving a service.

        :return: The wait_time of this Service.
        :rtype: str
        """
        return self._wait_time

    @wait_time.setter
    def wait_time(self, wait_time):
        """
        Sets the wait_time of this Service.
        Time a client may expect to wait before receiving a service.

        :param wait_time: The wait_time of this Service.
        :type: str
        """

        self._wait_time = wait_time

    @property
    def taxonomy_ids(self):
        """
        Gets the taxonomy_ids of this Service.
        A comma separated list of identifiers from the taxonomy table. Advanced users may also include composite categories, using * to combine two taxonomy terms.

        :return: The taxonomy_ids of this Service.
        :rtype: str
        """
        return self._taxonomy_ids

    @taxonomy_ids.setter
    def taxonomy_ids(self, taxonomy_ids):
        """
        Sets the taxonomy_ids of this Service.
        A comma separated list of identifiers from the taxonomy table. Advanced users may also include composite categories, using * to combine two taxonomy terms.

        :param taxonomy_ids: The taxonomy_ids of this Service.
        :type: str
        """

        self._taxonomy_ids = taxonomy_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
