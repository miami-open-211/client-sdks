<?php
/**
 * LocationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Miami Open 211 API
 *
 * This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * LocationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://miamiopen211-api.herokuapp.com/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return LocationsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation findNearbyLocations
     *
     * Find Nearby Locations
     *
     * @param string $accept  (required)
     * @param string $location_id  (required)
     * @param string $radius Default in miles is 0.5, minimum is 0.1. (optional)
     * @param string $page The particular page of results. Default is 1. (optional)
     * @param string $per_page Amount of locations to return per page. (optional)
     * @return \Swagger\Client\Model\Location[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findNearbyLocations($accept, $location_id, $radius = null, $page = null, $per_page = null)
    {
        list($response) = $this->findNearbyLocationsWithHttpInfo($accept, $location_id, $radius, $page, $per_page);
        return $response;
    }

    /**
     * Operation findNearbyLocationsWithHttpInfo
     *
     * Find Nearby Locations
     *
     * @param string $accept  (required)
     * @param string $location_id  (required)
     * @param string $radius Default in miles is 0.5, minimum is 0.1. (optional)
     * @param string $page The particular page of results. Default is 1. (optional)
     * @param string $per_page Amount of locations to return per page. (optional)
     * @return Array of \Swagger\Client\Model\Location[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function findNearbyLocationsWithHttpInfo($accept, $location_id, $radius = null, $page = null, $per_page = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept when calling findNearbyLocations');
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling findNearbyLocations');
        }
        // parse inputs
        $resourcePath = "/locations/{location_id}/nearby";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Location[]',
                '/locations/{location_id}/nearby'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Location[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Location[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveLocation
     *
     * Location
     *
     * @param string $accept  (required)
     * @param string $location_id  (required)
     * @return \Swagger\Client\Model\Location[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function retrieveLocation($accept, $location_id)
    {
        list($response) = $this->retrieveLocationWithHttpInfo($accept, $location_id);
        return $response;
    }

    /**
     * Operation retrieveLocationWithHttpInfo
     *
     * Location
     *
     * @param string $accept  (required)
     * @param string $location_id  (required)
     * @return Array of \Swagger\Client\Model\Location[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function retrieveLocationWithHttpInfo($accept, $location_id)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept when calling retrieveLocation');
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling retrieveLocation');
        }
        // parse inputs
        $resourcePath = "/locations/{location_id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Location[]',
                '/locations/{location_id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Location[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Location[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveLocationServices
     *
     * Services
     *
     * @param string $accept  (required)
     * @param string $location_id  (required)
     * @return \Swagger\Client\Model\Service[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function retrieveLocationServices($accept, $location_id)
    {
        list($response) = $this->retrieveLocationServicesWithHttpInfo($accept, $location_id);
        return $response;
    }

    /**
     * Operation retrieveLocationServicesWithHttpInfo
     *
     * Services
     *
     * @param string $accept  (required)
     * @param string $location_id  (required)
     * @return Array of \Swagger\Client\Model\Service[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function retrieveLocationServicesWithHttpInfo($accept, $location_id)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept when calling retrieveLocationServices');
        }
        // verify the required parameter 'location_id' is set
        if ($location_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location_id when calling retrieveLocationServices');
        }
        // parse inputs
        $resourcePath = "/locations/{location_id}/services";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // path params
        if ($location_id !== null) {
            $resourcePath = str_replace(
                "{" . "location_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($location_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Service[]',
                '/locations/{location_id}/services'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Service[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Service[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveLocations
     *
     * Locations
     *
     * @param string $accept  (required)
     * @param string $page  (optional)
     * @param string $per_page  (optional)
     * @return \Swagger\Client\Model\Location[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function retrieveLocations($accept, $page = null, $per_page = null)
    {
        list($response) = $this->retrieveLocationsWithHttpInfo($accept, $page, $per_page);
        return $response;
    }

    /**
     * Operation retrieveLocationsWithHttpInfo
     *
     * Locations
     *
     * @param string $accept  (required)
     * @param string $page  (optional)
     * @param string $per_page  (optional)
     * @return Array of \Swagger\Client\Model\Location[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function retrieveLocationsWithHttpInfo($accept, $page = null, $per_page = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept when calling retrieveLocations');
        }
        // parse inputs
        $resourcePath = "/locations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = $this->apiClient->getSerializer()->toHeaderValue($accept);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Location[]',
                '/locations'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Location[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Location[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
