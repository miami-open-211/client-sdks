/* 
 * Miami Open 211 API
 *
 * This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Organization
    /// </summary>
    [DataContract]
    public partial class Organization :  IEquatable<Organization>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Organization" /> class.
        /// </summary>
        /// <param name="Id">Each organization must have a unique identifier..</param>
        /// <param name="Name">The official or public name of the organization..</param>
        /// <param name="AlternateName">Alternative or commonly used name for the organization..</param>
        /// <param name="Description">A brief summary about the organization. It can contain markup such as HTML or Markdown..</param>
        /// <param name="Email">The contact e-mail address for the organization..</param>
        /// <param name="Url">The UR of the organization..</param>
        /// <param name="TaxStatus">Government assigned tax designation for for tax-exempt organizations..</param>
        /// <param name="TaxId">A government issued identifier used for the purpose of tax administration..</param>
        /// <param name="YearIncorporated">The year in which the organization was legally formed..</param>
        /// <param name="LegalStatus">The legal status defines the conditions that an organization is operating under..</param>
        public Organization(string Id = null, string Name = null, string AlternateName = null, string Description = null, string Email = null, string Url = null, string TaxStatus = null, string TaxId = null, string YearIncorporated = null, string LegalStatus = null)
        {
            this.Id = Id;
            this.Name = Name;
            this.AlternateName = AlternateName;
            this.Description = Description;
            this.Email = Email;
            this.Url = Url;
            this.TaxStatus = TaxStatus;
            this.TaxId = TaxId;
            this.YearIncorporated = YearIncorporated;
            this.LegalStatus = LegalStatus;
        }
        
        /// <summary>
        /// Each organization must have a unique identifier.
        /// </summary>
        /// <value>Each organization must have a unique identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The official or public name of the organization.
        /// </summary>
        /// <value>The official or public name of the organization.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Alternative or commonly used name for the organization.
        /// </summary>
        /// <value>Alternative or commonly used name for the organization.</value>
        [DataMember(Name="alternate_name", EmitDefaultValue=false)]
        public string AlternateName { get; set; }
        /// <summary>
        /// A brief summary about the organization. It can contain markup such as HTML or Markdown.
        /// </summary>
        /// <value>A brief summary about the organization. It can contain markup such as HTML or Markdown.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// The contact e-mail address for the organization.
        /// </summary>
        /// <value>The contact e-mail address for the organization.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The UR of the organization.
        /// </summary>
        /// <value>The UR of the organization.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Government assigned tax designation for for tax-exempt organizations.
        /// </summary>
        /// <value>Government assigned tax designation for for tax-exempt organizations.</value>
        [DataMember(Name="tax_status", EmitDefaultValue=false)]
        public string TaxStatus { get; set; }
        /// <summary>
        /// A government issued identifier used for the purpose of tax administration.
        /// </summary>
        /// <value>A government issued identifier used for the purpose of tax administration.</value>
        [DataMember(Name="tax_id", EmitDefaultValue=false)]
        public string TaxId { get; set; }
        /// <summary>
        /// The year in which the organization was legally formed.
        /// </summary>
        /// <value>The year in which the organization was legally formed.</value>
        [DataMember(Name="year_incorporated", EmitDefaultValue=false)]
        public string YearIncorporated { get; set; }
        /// <summary>
        /// The legal status defines the conditions that an organization is operating under.
        /// </summary>
        /// <value>The legal status defines the conditions that an organization is operating under.</value>
        [DataMember(Name="legal_status", EmitDefaultValue=false)]
        public string LegalStatus { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Organization {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AlternateName: ").Append(AlternateName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  TaxStatus: ").Append(TaxStatus).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  YearIncorporated: ").Append(YearIncorporated).Append("\n");
            sb.Append("  LegalStatus: ").Append(LegalStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Organization);
        }

        /// <summary>
        /// Returns true if Organization instances are equal
        /// </summary>
        /// <param name="other">Instance of Organization to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Organization other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.AlternateName == other.AlternateName ||
                    this.AlternateName != null &&
                    this.AlternateName.Equals(other.AlternateName)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.TaxStatus == other.TaxStatus ||
                    this.TaxStatus != null &&
                    this.TaxStatus.Equals(other.TaxStatus)
                ) && 
                (
                    this.TaxId == other.TaxId ||
                    this.TaxId != null &&
                    this.TaxId.Equals(other.TaxId)
                ) && 
                (
                    this.YearIncorporated == other.YearIncorporated ||
                    this.YearIncorporated != null &&
                    this.YearIncorporated.Equals(other.YearIncorporated)
                ) && 
                (
                    this.LegalStatus == other.LegalStatus ||
                    this.LegalStatus != null &&
                    this.LegalStatus.Equals(other.LegalStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.AlternateName != null)
                    hash = hash * 59 + this.AlternateName.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.TaxStatus != null)
                    hash = hash * 59 + this.TaxStatus.GetHashCode();
                if (this.TaxId != null)
                    hash = hash * 59 + this.TaxId.GetHashCode();
                if (this.YearIncorporated != null)
                    hash = hash * 59 + this.YearIncorporated.GetHashCode();
                if (this.LegalStatus != null)
                    hash = hash * 59 + this.LegalStatus.GetHashCode();
                return hash;
            }
        }
    }

}
