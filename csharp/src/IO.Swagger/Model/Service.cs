/* 
 * Miami Open 211 API
 *
 * This is a developer area for the Miami Open211 API, providing access to the raw data behind the Switchboard of Miami website. The purpose of this API is to allow anyone to develop web, mobile, or other types of applications that serve the mission of Miami Open211.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Service
    /// </summary>
    [DataContract]
    public partial class Service :  IEquatable<Service>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Service" /> class.
        /// </summary>
        /// <param name="Id">Each service must have a unique identifier..</param>
        /// <param name="OrganizationId">The identifier of the organization that provides this service..</param>
        /// <param name="LocationId">The identifier of the location where this service is delivered..</param>
        /// <param name="ProgramId">The identifier of the program this service is delivered under..</param>
        /// <param name="Name">The official or public name of the service..</param>
        /// <param name="AlternateName">Alternative or commonly used name for a service..</param>
        /// <param name="Description">A description of the service..</param>
        /// <param name="Url">URL of the service.</param>
        /// <param name="Email">Email address for the service.</param>
        /// <param name="Status">The current status of the service..</param>
        /// <param name="ApplicationProcess">The steps needed to access the service..</param>
        /// <param name="WaitTime">Time a client may expect to wait before receiving a service..</param>
        /// <param name="TaxonomyIds">A comma separated list of identifiers from the taxonomy table. Advanced users may also include composite categories, using * to combine two taxonomy terms..</param>
        public Service(string Id = null, string OrganizationId = null, string LocationId = null, string ProgramId = null, string Name = null, string AlternateName = null, string Description = null, string Url = null, string Email = null, string Status = null, string ApplicationProcess = null, string WaitTime = null, string TaxonomyIds = null)
        {
            this.Id = Id;
            this.OrganizationId = OrganizationId;
            this.LocationId = LocationId;
            this.ProgramId = ProgramId;
            this.Name = Name;
            this.AlternateName = AlternateName;
            this.Description = Description;
            this.Url = Url;
            this.Email = Email;
            this.Status = Status;
            this.ApplicationProcess = ApplicationProcess;
            this.WaitTime = WaitTime;
            this.TaxonomyIds = TaxonomyIds;
        }
        
        /// <summary>
        /// Each service must have a unique identifier.
        /// </summary>
        /// <value>Each service must have a unique identifier.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The identifier of the organization that provides this service.
        /// </summary>
        /// <value>The identifier of the organization that provides this service.</value>
        [DataMember(Name="organization_id", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }
        /// <summary>
        /// The identifier of the location where this service is delivered.
        /// </summary>
        /// <value>The identifier of the location where this service is delivered.</value>
        [DataMember(Name="location_id", EmitDefaultValue=false)]
        public string LocationId { get; set; }
        /// <summary>
        /// The identifier of the program this service is delivered under.
        /// </summary>
        /// <value>The identifier of the program this service is delivered under.</value>
        [DataMember(Name="program_id", EmitDefaultValue=false)]
        public string ProgramId { get; set; }
        /// <summary>
        /// The official or public name of the service.
        /// </summary>
        /// <value>The official or public name of the service.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Alternative or commonly used name for a service.
        /// </summary>
        /// <value>Alternative or commonly used name for a service.</value>
        [DataMember(Name="alternate_name", EmitDefaultValue=false)]
        public string AlternateName { get; set; }
        /// <summary>
        /// A description of the service.
        /// </summary>
        /// <value>A description of the service.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// URL of the service
        /// </summary>
        /// <value>URL of the service</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Email address for the service
        /// </summary>
        /// <value>Email address for the service</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// The current status of the service.
        /// </summary>
        /// <value>The current status of the service.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// The steps needed to access the service.
        /// </summary>
        /// <value>The steps needed to access the service.</value>
        [DataMember(Name="application_process", EmitDefaultValue=false)]
        public string ApplicationProcess { get; set; }
        /// <summary>
        /// Time a client may expect to wait before receiving a service.
        /// </summary>
        /// <value>Time a client may expect to wait before receiving a service.</value>
        [DataMember(Name="wait_time", EmitDefaultValue=false)]
        public string WaitTime { get; set; }
        /// <summary>
        /// A comma separated list of identifiers from the taxonomy table. Advanced users may also include composite categories, using * to combine two taxonomy terms.
        /// </summary>
        /// <value>A comma separated list of identifiers from the taxonomy table. Advanced users may also include composite categories, using * to combine two taxonomy terms.</value>
        [DataMember(Name="taxonomy_ids", EmitDefaultValue=false)]
        public string TaxonomyIds { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Service {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ProgramId: ").Append(ProgramId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  AlternateName: ").Append(AlternateName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ApplicationProcess: ").Append(ApplicationProcess).Append("\n");
            sb.Append("  WaitTime: ").Append(WaitTime).Append("\n");
            sb.Append("  TaxonomyIds: ").Append(TaxonomyIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Service);
        }

        /// <summary>
        /// Returns true if Service instances are equal
        /// </summary>
        /// <param name="other">Instance of Service to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Service other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.LocationId == other.LocationId ||
                    this.LocationId != null &&
                    this.LocationId.Equals(other.LocationId)
                ) && 
                (
                    this.ProgramId == other.ProgramId ||
                    this.ProgramId != null &&
                    this.ProgramId.Equals(other.ProgramId)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.AlternateName == other.AlternateName ||
                    this.AlternateName != null &&
                    this.AlternateName.Equals(other.AlternateName)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.ApplicationProcess == other.ApplicationProcess ||
                    this.ApplicationProcess != null &&
                    this.ApplicationProcess.Equals(other.ApplicationProcess)
                ) && 
                (
                    this.WaitTime == other.WaitTime ||
                    this.WaitTime != null &&
                    this.WaitTime.Equals(other.WaitTime)
                ) && 
                (
                    this.TaxonomyIds == other.TaxonomyIds ||
                    this.TaxonomyIds != null &&
                    this.TaxonomyIds.Equals(other.TaxonomyIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.LocationId != null)
                    hash = hash * 59 + this.LocationId.GetHashCode();
                if (this.ProgramId != null)
                    hash = hash * 59 + this.ProgramId.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.AlternateName != null)
                    hash = hash * 59 + this.AlternateName.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.ApplicationProcess != null)
                    hash = hash * 59 + this.ApplicationProcess.GetHashCode();
                if (this.WaitTime != null)
                    hash = hash * 59 + this.WaitTime.GetHashCode();
                if (this.TaxonomyIds != null)
                    hash = hash * 59 + this.TaxonomyIds.GetHashCode();
                return hash;
            }
        }
    }

}
